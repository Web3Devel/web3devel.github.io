#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 9.1.0.6 from Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "Cut.x3d"
# META "description" "Cutting plane parts: this file contains two PROTOs used in creating a cutting plane. TexturePlane creates a plane with one of a set of textures mapped to it. The texture choice is controlled by a fraction eventIn. SlidingPlane creates a texture plane that slides back and forth along the X axis, changing the texture based upon the X position."
# META "creator" "David R. Nadeau"
# META "translator" "Don Brutzman"
# META "created" "1 July 1998"
# META "translated" "2 February 2014"
# META "modified" "3 February 2014"
# META "reference" "TexturePlane.x3d"
# META "reference" "originals/cut.wrl"
# META "reference" "http://www.siggraph.org/s98"
# META "reference" "http://www.siggraph.org/s98/conference/courses/18.html"
# META "reference" "http://www.sdsc.edu/~moreland/courses/Siggraph98/vrml97/slides/mt0497.htm"
# META "reference" "http://www.sdsc.edu/~moreland/courses/Siggraph98/vrml97/vrml97.htm"
# META "reference" "http://www.web3d.org/x3d/content/examples/X3dResources.html"
# META "identifier" "http://www.web3d.org/x3d/content/examples/Vrml2.0Sourcebook/Siggraph98Course/Cut.x3d"
# META "generator" "Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html"
# META "generator" "X3D-Edit, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  info [ "Copyright (c) 1997, David R. Nadeau" ]
  title "Cutting Plane parts"
}
PROTO TexturePlane [
  field        MFNode	textures [
    ImageTexture {
    }
]   eventIn      SFFloat	set_fraction
] {
 ### Warning:  <ProtoDeclare name='TexturePlane'/> ProtoBody children following first child will not be rendered, since the first child determines node type. (Authors can silence this warning by placing a comment as second child.)
  Group {
    children [
        Shape {
          appearance DEF App Appearance {
          }
          geometry IndexedFaceSet {
            coordIndex [ 0 1 2 3 ]
            solid FALSE
            texCoordIndex [ 0 1 2 3 ]
            texCoord TextureCoordinate {
              point [ 0.0 0.0 1.0 0.0 1.0 1.0 0.0 1.0 ]
            }
            coord Coordinate {
              point [ -1.0 -1.0 0.0 1.0 -1.0 0.0 1.0 1.0 0.0 -1.0 1.0 0.0 ]
            }
          }
        }
        Shape {
          appearance Appearance {
          }
          geometry IndexedLineSet {
            coordIndex [ 0 1 2 3 0 ]
            coord Coordinate {
              point [ -1.0 -1.0 0.0 1.0 -1.0 0.0 1.0 1.0 0.0 -1.0 1.0 0.0 ]
            }
          }
        }
    ]
  }
  DEF Selector Script {
    field        MFNode	textures IS textures
    eventOut     SFNode      texture_changed
    eventIn      SFFloat	set_fraction IS set_fraction
                 ### Warning:  Script attribute directOutput='true' usually needed when field(s) of type SFNode/MFNode are present. directOutput false means Script is not allowed to modify referenced nodes.

	url [ "javascript:
            function initialize( ) {
                texture_changed = textures[0];
            }
            function set_fraction( f, tm ) {
                i = Math.floor(f * 10);
                if ( i == 10 ) { i = 9; }
                texture_changed = textures[i];
            }

        
" ]
  }
  ROUTE Selector.texture_changed TO App.set_texture
 ### Error:  Mismatched type: ROUTE source Selector.texture_changed has type SFNode, but destination App.set_texture has type Appearance.texture.FieldTypeNotFound.
}
PROTO SlidingPlane [
   ### Warning:  ProtoInterface <field name='textures'/> is unreferenced in ProtoBody with no corresponding IS/connect/@protoField
field        MFNode	textures [
    ImageTexture {
    }
]   field        SFVec2f	minMaxX 0.0 1.0
  field        SFFloat	initialX 0.0
] {
 ### Warning:  <ProtoDeclare name='SlidingPlane'/> ProtoBody children following first child will not be rendered, since the first child determines node type. (Authors can silence this warning by placing a comment as second child.)
  Transform {
    rotation 0.0 1.0 0.0 1.571
    children [
        DEF Slider PlaneSensor {
        }
        DEF PlanePosition Transform {
          rotation 0.0 1.0 0.0 -1.571
          children [
              DEF Plane  TexturePlane {
              }
              Transform {
                rotation 0.0 1.0 0.0 1.571
                translation 1.05 -1.2 0.0
                children [
                    Shape {
                      appearance Appearance {
                      }
                      geometry DEF Label Text {
                        string [ "" ]
                        fontStyle FontStyle {
                          justify [ "MIDDLE"  ] 
                          size 0.3
                          style "BOLD"
                        }
                      }
                    }
                ]
              }
          ]
        }
    ]
  }
  DEF Translator Script {
    eventIn      SFVec3f	set_translation
    field        SFVec2f	minMaxX IS minMaxX
    eventOut     SFVec2f	minPosition_changed
    eventOut     SFFloat	fraction_changed
    field        SFFloat	initialX IS initialX
    eventOut     SFVec3f	offset_changed
    eventOut     SFVec2f	maxPosition_changed
    eventOut     MFString	label_changed
                
	url [ "javascript:
            function translate( x ) {
            // compute the fraction using the given X position
                f = (x-minMaxX[0]) / (minMaxX[1] - minMaxX[0]);
            // send a fraction event
                fraction_changed = f;
            // send a new label string with 1 digit after decimal
                label_changed[0] = Math.floor(f*10.0)/10.0;
            }

            function initialize( ) {
            // set the plane sensor bounds
                minPosition_changed[0] = minMaxX[0];
                minPosition_changed[1] = 0.0;
                maxPosition_changed[0] = minMaxX[1];
                maxPosition_changed[1] = 0.0;
            // set the plane sensor initial position
                offset_changed[0] = initialX;
                offset_changed[1] = 0.0;
                offset_changed[2] = 0.0;
            // compute the initial values
                translate( initialX );
            }

            function set_translation( t, tm ) {
            // compute the new values
                translate( t[0] );
            }

        
" ]
  }
  ROUTE Slider.translation_changed TO PlanePosition.set_translation
  ROUTE Slider.translation_changed TO Translator.set_translation
  ROUTE Translator.fraction_changed TO Plane.set_fraction
  ROUTE Translator.label_changed TO Label.set_string
  ROUTE Translator.minPosition_changed TO Slider.set_minPosition
  ROUTE Translator.maxPosition_changed TO Slider.set_maxPosition
  ROUTE Translator.offset_changed TO Slider.set_offset
  ROUTE Translator.offset_changed TO PlanePosition.set_translation
}
