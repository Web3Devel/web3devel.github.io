#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 9.1.0.2 from Saxonica

PROFILE Immersive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "Figure30.1ScriptSlidingBall.x3d"
META "creator" "Figure 30.1, The VRML 2.0 Sourcebook, Copyright [1997] By Andrea L. Ames, David R. Nadeau, and John L. Moreland"
META "reference" "http://www.wiley.com/legacy/compbooks/vrml2sbk/ch30/30fig01.htm"
META "translator" "Don Brutzman"
META "created" "28 November 2000"
META "modified" "4 February 2014"
META "description" "A sliding red sphere and a custom interpolation script. Three ways to include ECMAScript (JavaScript) programming are compared: external file, url script code, and embedded script code. Recommendation: use embedded script code inside a CDATA block."
META "identifier" "http://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Chapter30-Scripts/Figure30.1ScriptSlidingBall.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

Viewpoint {
  description "sliding ball"
  orientation 1 0 0 -0.2
  position 0.5 0.5 1.5
}
# Background nodes are usually best placed at the top of the scene since they have global effect and are bindable nodes.
Background {
  groundAngle [ 1.309 1.570796 ]
  groundColor [ 0 0 0.1 0 0.1 0.3 0.3 0.3 0.6 ]
  skyAngle [ 1.309 1.571 ]
  skyColor [ 1 0 0.8 0.5 0 0.8 0 0 0.8 ]
}
Group {
  children [
      DEF Floor Transform {
        translation 0.5 -0.005 0
        children [
            Shape {
              geometry Box {
                size 1 0.01 0.5
              }
              appearance Appearance {
                material Material {
                  diffuseColor 0.7 0.7 0.7
                }
              }
            }
        ]
      }
      Transform {
        translation 0 0.1 0
        children [
            DEF BallTransform Transform {
              children [
                  Shape {
                    geometry Sphere {
                      radius 0.1
                    }
                    appearance Appearance {
                      material Material {
                        diffuseColor 1 0.3 0.3
                      }
                    }
                  }
              ]
            }
        ]
      }
      DEF Clock TimeSensor {
        cycleInterval 4
        loop TRUE
      }
      # In this example, each Script node can serve as a simple replacement for a PositionInterpolator node.
      # First Script example: external .js javascript file. This can be helpful if multiple Script nodes (perhaps in multiple scenes) reuse the same code, allowing any changes to occur in a single .js ecmascript file.
      DEF MoverUsingExternalScriptFile Script {
        inputOnly      SFFloat	set_fraction
        outputOnly     SFVec3f	value_changed

	url [ "Figure30.1ScriptSlidingBall.js" "http://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Chapter30-Scripts/Figure30.1ScriptSlidingBall.js"
 ]
      }
      # Second Script example: executable code is placed in url field. This is legal, but no longer a recommended approach.
      # Warning: avoid // inline comments or else canonicalization will hide all follow-on code!
      DEF MoverUsingUrlScript Script {
        inputOnly      SFFloat	set_fraction
        outputOnly     SFVec3f	value_changed

	url [ "ecmascript: function set_fraction( fraction eventTime ) { value_changed[0] = fraction; value_changed[1] = 0.0; value_changed[2] = 0.0; }"
 ]
      }
      # Third Script example, using preferred method: script code contained in CDATA block
      DEF MoverUsingContainedScript Script {
        inputOnly      SFFloat	set_fraction          # [appinfo] receive fraction from clock

        outputOnly     SFVec3f	value_changed          # [appinfo] produce output position to move the ball


	url [ "ecmascript:

// Move a shape in a straight path
function set_fraction( fraction, eventTime ) {
	value_changed[0] = fraction;    // X component
	value_changed[1] = 0.0;         // Y component
	value_changed[2] = 0.0;         // Z component
}

      
" ]
      }
  ]
}
# Any one of the three Mover script alternatives can drive the ball - modify both ROUTEs to test
ROUTE Clock.fraction_changed TO MoverUsingContainedScript.set_fraction
ROUTE MoverUsingContainedScript.value_changed TO BallTransform.set_translation
