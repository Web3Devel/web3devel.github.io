#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 9.1.0.2 from Saxonica

PROFILE Interactive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "Figure09.7CylinderSensor.x3d"
META "creator" "Figure 9.7, The VRML 2.0 Sourcebook, Copyright [1997] By Andrea L. Ames, David R. Nadeau, and John L. Moreland"
META "reference" "http://www.wiley.com/legacy/compbooks/vrml2sbk/ch09/09fig07.htm"
META "transcriber" "Don Brutzman"
META "created" "12 August 2000"
META "modified" "1 February 2014"
META "description" "Two shapes that rotate about an axis when the viewer drags them, with coordinate axes superimposed to show X3D/VRML directions."
META "identifier" "http://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Chapter09-SensingViewer/Figure09.7CylinderSensor.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

# Click and drag to rotate shapes. Superfluous Group nodes removed.
# First rotate to reorient the first CylinderSensor
Transform {
  rotation 1 0 0 1.57
  translation -2 0 0
  children [
      DEF FIRST_CYLINDERSENSOR CylinderSensor {
        description "Click and drag to rotate"
        maxAngle 1.57
        minAngle -0.78
      }
      DEF FIRST_TRANSFORM Transform {
        children [
            # Note that we are connecting a rotation output to a rotation input in these ROUTEs.
            # Keep transparent user-interface geometry in this rotated CylinderSensor coordinate frame
            DEF TRANSPARENT_CYLINDER_TRANSFORM Transform {
              children [
                  Shape {
                    geometry Cylinder {
                      height .5
                    }
                    appearance Appearance {
                      material Material {
                        diffuseColor .7 .7 .7
                        transparency .5
                      }
                    }
                  }
              ]
            }
            # Now restore original Y=up coordinate frame prior to drawing actual geometry
            Transform {
              rotation 1 0 0 -1.57
              children [
                  Shape {
                    geometry Box {
                      size 1 3 1
                    }
                    appearance DEF FIRST_APPEARANCE Appearance {
                      material Material {
                        diffuseColor .9 .9 .1
                        emissiveColor .2 .2 .05
                      }
                    }
                  }
              ]
            }
        ]
      ROUTE FIRST_CYLINDERSENSOR.rotation_changed TO FIRST_TRANSFORM.set_rotation
      }
  ]
}
# Note this second example uses a simpler pattern: since we are not rotating the axis of the CylinderSensor away from the vertical, we do not need to change that rotation back again for the target geometry.
DEF SECOND_TRANSFORM Transform {
  translation 2 0 0
  children [
      DEF SECOND_CYLINDERSENSOR CylinderSensor {
        description "Click and drag to rotate"
      }
      # Keep transparent user-interface geometry in this rotated CylinderSensor coordinate frame
      USE TRANSPARENT_CYLINDER_TRANSFORM
      # Rotate actual geometry
      Transform {
        rotation 1 0 0 0.52
        children [
            Shape {
              geometry Cone {
              }
              appearance USE FIRST_APPEARANCE
            }
        ]
      }
  ]
ROUTE SECOND_CYLINDERSENSOR.rotation_changed TO SECOND_TRANSFORM.set_rotation
}
