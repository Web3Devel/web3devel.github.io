#X3D V3.3 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

META "title" "Cut.x3d"
META "description" "Cutting plane parts: this file contains two prototype declarations used in creating a cutting plane. The example scene TexturePlane uses these for external prototype instances and creates a plane with one of a set of textures mapped to it. The texture choice is controlled by a fraction eventIn. SlidingPlane creates a texture plane that slides back and forth along the X axis, changing the texture based upon the X position."
META "creator" "David R. Nadeau"
META "translator" "Don Brutzman"
META "created" "1 July 1998"
META "translated" "2 February 2014"
META "modified" "16 December 2023"
META "reference" "CutPlane.x3d"
META "reference" "TexturePlane.x3d"
META "reference" "originals/cut.wrl"
META "reference" "http://www.siggraph.org/s98"
META "reference" "http://www.siggraph.org/s98/conference/courses/18.html"
META "reference" "http://www.sdsc.edu/~moreland/courses/Siggraph98/vrml97/slides/mt0497.htm"
META "reference" "http://www.sdsc.edu/~moreland/courses/Siggraph98/vrml97/vrml97.htm"
META "reference" "https://www.web3d.org/x3d/content/examples/X3dResources.html"
META "identifier" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Siggraph98Course/Cut.x3d"
META "generator" "Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html"
META "generator" "X3D-Edit, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  info [ "Copyright (c) 1997, David R. Nadeau" ]
  title "Cutting Plane parts"
}
PROTO TexturePlane [
  initializeOnly MFNode	 textures [ ]
    # initialized with ImageTexture nodes upon use

  inputOnly      SFFloat	 set_fraction
] {
  Group {
    children [
        Shape {
          appearance DEF App Appearance {
          }
          geometry IndexedFaceSet {
            coordIndex [ 0 1 2 3 ]
            solid FALSE
            texCoordIndex [ 0 1 2 3 ]
            texCoord TextureCoordinate {
              point [ 0.0 0.0 1.0 0.0 1.0 1.0 0.0 1.0 ]
            }
            coord Coordinate {
              point [ -1.0 -1.0 0.0 1.0 -1.0 0.0 1.0 1.0 0.0 -1.0 1.0 0.0 ]
            }
          }
        }
        Shape {
          appearance Appearance {
          }
          geometry IndexedLineSet {
            coordIndex [ 0 1 2 3 0 ]
            coord Coordinate {
              point [ -1.0 -1.0 0.0 1.0 -1.0 0.0 1.0 1.0 0.0 -1.0 1.0 0.0 ]
            }
          }
        }
    ]
  }
  DEF Selector Script {
    initializeOnly MFNode	 textures IS textures
    outputOnly     SFNode       texture_changed
    inputOnly      SFFloat	 set_fraction IS set_fraction
    directOutput TRUE
                
	url [ "ecmascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()

    function initialize( ) {
        texture_changed = textures[0];
        Browser.println ('[Cut Selector] initialize(): textures.length=' + textures.length); // debug
    }
    function set_fraction( f, tm ) {
        i = Math.floor(f * 10);
        if ( i == 10 ) { i = 9; }
        Browser.println ('[Cut Selector] set_fraction(): i=' + i); // debug
        texture_changed = textures[i];
    }

        
" ]
  }
  ROUTE Selector.texture_changed TO App.set_texture
}
PROTO SlidingPlane [
  initializeOnly MFNode	 textures [ ]
    # initialized with ImageTexture nodes upon use

  initializeOnly SFVec2f	 minMaxX 0.0 1.0
  initializeOnly SFFloat	 initialX 0.0
] {
 ### Warning:  <ProtoDeclare name='SlidingPlane'/> ProtoBody child (or descendant) Shape following first child will not be rendered, since the first child determines node type of this prototype. (Authors can silence this warning by placing a comment as second child.)
  Transform {
    rotation 0.0 1.0 0.0 1.571
    children [
        DEF Slider PlaneSensor {
          description "drag to see cross-section slices"
        }
        DEF PlanePosition Transform {
          rotation 0.0 1.0 0.0 -1.571
          children [
              DEF Plane  TexturePlane {
                                  textures IS textures
              }
              Transform {
                rotation 0.0 1.0 0.0 1.571
                translation 1.05 -1.2 0.0
                children [
                    Shape {
                      appearance Appearance {
                      }
                      geometry DEF Label Text {
                        string [ "" ]
                        fontStyle FontStyle {
                          justify [ "MIDDLE" "MIDDLE"  ] 
                          size 0.3
                          ### style='BOLD'
                        }
                      }
                    }
                ]
              }
          ]
        }
    ]
  }
  DEF Translator Script {
    inputOnly      SFVec3f	 set_translation
    initializeOnly SFVec2f	 minMaxX IS minMaxX
    outputOnly     SFVec2f	 minPosition_changed
    outputOnly     SFFloat	 fraction_changed
    initializeOnly SFFloat	 initialX IS initialX
    outputOnly     SFVec3f	 offset_changed
    outputOnly     SFVec2f	 maxPosition_changed
    outputOnly     MFString	 label_changed
                
	url [ "ecmascript:
        function translate( x ) {
        // compute the fraction using the given X position
            f = (x-minMaxX[0]) / (minMaxX[1] - minMaxX[0]);
        // send a fraction event
            fraction_changed = f;
        // send a new label string with 1 digit after decimal
            label_changed[0] = Math.floor(f*10.0)/10.0;
        }

        function initialize( ) {
        // set the plane sensor bounds
            minPosition_changed[0] = minMaxX[0];
            minPosition_changed[1] = 0.0;
            maxPosition_changed[0] = minMaxX[1];
            maxPosition_changed[1] = 0.0;
        // set the plane sensor initial position
            offset_changed[0] = initialX;
            offset_changed[1] = 0.0;
            offset_changed[2] = 0.0;
        // compute the initial values
            translate( initialX );
        }

        function set_translation( t, tm ) {
        // compute the new values
            translate( t[0] );
        }

        
" ]
  }
  ROUTE Slider.translation_changed TO PlanePosition.set_translation
  ROUTE Slider.translation_changed TO Translator.set_translation
  ROUTE Translator.fraction_changed TO Plane.set_fraction
  ROUTE Translator.label_changed TO Label.set_string
  ROUTE Translator.minPosition_changed TO Slider.set_minPosition
  ROUTE Translator.maxPosition_changed TO Slider.set_maxPosition
  ROUTE Translator.offset_changed TO Slider.set_offset
  ROUTE Translator.offset_changed TO PlanePosition.set_translation
}
# Display scene instructions for viewing an example scene with a corresponding prototype instance
Background {
  skyColor [ 0 0.333333 0.66667 ]
}
Transform {
  translation 0 2.5 0
  children [
      Anchor {
        description "select text to view parent scene"
        url [ "CutPlane.x3d" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Siggraph98Course/CutPlane.x3d" "CutPlane.wrl" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Siggraph98Course/CutPlane.wrl" ]
        children [
            Shape {
              geometry Text {
                string [ "The Cut.x3d scene holds" "prototype declarations" "Select this text to view example usage" "in CutPlane.x3d scene" ]
                fontStyle FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                  ### style='BOLD'
                }
              }
              appearance Appearance {
                material Material {
                  diffuseColor 1 0.9 0.4
                }
              }
            }
            # Invisible box behind text makes selection easier
            Shape {
              geometry Box {
                size 12 5 0.1
              }
              appearance Appearance {
                material Material {
                  transparency 1
                }
              }
            }
        ]
      }
  ]
}
Transform {
  translation 0 -2.5 0
  children [
      Anchor {
        description "select text to view parent scene"
        url [ "TexturePlane.x3d" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Siggraph98Course/TexturePlane.x3d" "TexturePlane.wrl" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Siggraph98Course/TexturePlane.wrl" ]
        children [
            Shape {
              geometry Text {
                string [ "or select this text to view example usage" "in TexturePlane.x3d scene" ]
                fontStyle FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                  ### style='BOLD'
                }
              }
              appearance Appearance {
                material Material {
                  diffuseColor 1 0.9 0.4
                }
              }
            }
            # Invisible box behind text makes selection easier
            Shape {
              geometry Box {
                size 12 5 0.1
              }
              appearance Appearance {
                material Material {
                  transparency 1
                }
              }
            }
        ]
      }
  ]
}
